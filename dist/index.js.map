{
  "version": 3,
  "sources": ["../lib/higher_newton.js", "../lib/polyval_ak1.js", "../lib/polyval_ak2.js", "../lib/lambdaeta.js", "../lib/chepolsum.js", "../lib/polyval_c.js", "../lib/polyval_d.js", "../lib/stirling.js", "../lib/gamstar.js", "../lib/rational_ak0bk0.js", "../lib/eps1.js", "../lib/rational_ak1bk1.js", "../lib/rational_ak2bk2.js", "../lib/rational_ak3bk3.js", "../lib/eps2.js", "../lib/rational_ak4bk4.js", "../lib/rational_ak5bk5.js", "../lib/rational_ak6bk6.js", "../lib/rational_ak7bk7.js", "../lib/rational_ak8bk8.js", "../lib/eps3.js", "../lib/compute.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar gammainc = require( '@stdlib/math-base-special-gammainc' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar MAX_FLOAT32 = require( '@stdlib/constants-float32-max' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'gammaincinv:higher_newton' );\n\n\n// MAIN //\n\n/**\n* Implementation of the high order Newton-like method.\n*\n* @private\n* @param {number} x0 - initial value\n* @param {number} a - scale parameter\n* @param {number} m - indicator\n* @param {Probability} p - probability value\n* @param {Probability} q - probability value\n* @param {number} lgama - logarithm of scale parameter\n* @param {number} invfp - one over `fp`\n* @param {boolean} pcase - boolean indicating whether p < 0.5\n* @returns {number} function value of the inverse\n*/\nfunction higherNewton( x0, a, m, p, q, lgama, invfp, pcase ) {\n\tvar dlnr;\n\tvar xini;\n\tvar ck0;\n\tvar ck1;\n\tvar ck2;\n\tvar a2;\n\tvar x2;\n\tvar px;\n\tvar qx;\n\tvar xr;\n\tvar t;\n\tvar n;\n\tvar r;\n\tvar x;\n\n\tx = x0;\n\tt = 1;\n\tn = 1;\n\ta2 = a * a;\n\txini = x0;\n\tdo {\n\t\tx = x0;\n\t\tx2 = x * x;\n\t\tif ( m === 0 ) {\n\t\t\tdlnr = ( ( 1.0-a ) * ln( x ) ) + x + lgama;\n\t\t\tif ( dlnr > ln( MAX_FLOAT32 ) ) {\n\t\t\t\tdebug( 'Warning: overflow problems in one or more steps of the computation. The initial approximation to the root is returned.' );\n\t\t\t\treturn xini;\n\t\t\t}\n\t\t\tr = exp( dlnr );\n\t\t} else {\n\t\t\tr = -invfp * x;\n\t\t}\n\t\tif ( pcase ) {\n\t\t\t// Call: gammainc( x, s[, regularized = true ][, upper = false ] )\n\t\t\tpx = gammainc( x, a, true, false );\n\t\t\tck0 = -r * ( px - p );\n\t\t} else {\n\t\t\t// Call: gammainc( x, s[, regularized = true ][, upper = true ] )\n\t\t\tqx = gammainc( x, a, true, true );\n\t\t\tck0 = r * ( qx - q );\n\t\t}\n\t\tr = ck0;\n\t\tif ( ( p > 1e-120 ) || ( n > 1 ) ) {\n\t\t\tck1 = 0.5 * ( x - a + 1.0 ) / x;\n\t\t\tck2 = ( (2*x2) - (4*x*a) + (4*x) + (2*a2) - (3*a) + 1 ) / x2;\n\t\t\tck2 /= 6.0;\n\t\t\tx0 = x + ( r * ( 1.0 + ( r * ( ck1 + (r*ck2) ) ) ) );\n\t\t} else {\n\t\t\tx0 = x + r;\n\t\t}\n\t\tt = abs( ( x/x0 ) - 1.0 );\n\t\tn += 1;\n\t\tx = x0;\n\t\tif ( x < 0 ) {\n\t\t\tx = xini;\n\t\t\tn = 100;\n\t\t}\n\t} while ( ( ( t > 2e-14 ) && ( n < 35 ) ) );\n\tif ( ( t > 2e-14 ) || ( n > 99 ) ) {\n\t\tdebug( 'Warning: the number of iterations in the Newton method reached the upper limit N=35. The last value obtained for the root is given as output.' );\n\t}\n\txr = x || 0;\n\treturn xr;\n}\n\n\n// EXPORTS //\n\nmodule.exports = higherNewton;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn 0.0 + (x * (1.0 + (x * (1.0 + (x * (1.5 + (x * (2.6666666666666665 + (x * (5.208333333333333 + (x * 10.8))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn 1.0 + (x * (1.0 + (x * (0.3333333333333333 + (x * (0.027777777777777776 + (x * (-0.003703703703703704 + (x * (0.0002314814814814815 + (x * 0.00005878894767783657))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar evalpoly = require( '@stdlib/math-base-tools-evalpoly' );\nvar polyvalAK1 = require( './polyval_ak1.js' );\nvar polyvalAK2 = require( './polyval_ak2.js' );\n\n\n// VARIABLES //\n\nvar THRESHOLD = 1.0e-8;\nvar ONEO12 = 0.0833333333333333333333333333333;\nvar ONEO120 = 0.00833333333333333333333333333333;\n\n// Polynomial coefficient workspace:\nvar AK = [ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Returns the positive number satisfying \\\\( \\eta^2/2=\\lambda-1-\\ln(\\lambda) \\\\) with \\\\( \\operatorname{sign}(\\lambda-1)=\\operatorname{sign}(\\eta) \\\\).\n*\n* @private\n* @param {number} eta - eta value\n* @returns {number} value satisfying equation\n*/\nfunction lambdaeta( eta ) {\n\tvar L2;\n\tvar L3;\n\tvar L4;\n\tvar L5;\n\tvar la;\n\tvar L;\n\tvar q;\n\tvar r;\n\tvar s;\n\n\ts = eta * eta * 0.5;\n\tif ( eta === 0.0 ) {\n\t\tla = 0.0;\n\t}\n\telse if ( eta < -1.0 ) {\n\t\tr = exp( -1.0 - s );\n\t\tla = polyvalAK1( r );\n\t}\n\telse if ( eta < 1.0 ) {\n\t\tr = eta;\n\t\tla = polyvalAK2( r );\n\t}\n\telse {\n\t\tr = 11.0 + s;\n\t\tL = ln( r );\n\t\tla = r + L;\n\t\tr = 1.0 / r;\n\t\tL2 = L * L;\n\t\tL3 = L2 * L;\n\t\tL4 = L3 * L;\n\t\tL5 = L4 * L;\n\t\tAK[ 1 ] = ( 2.0-L ) * 0.5;\n\t\tAK[ 2 ] = ( ( -9.0*L ) + 6.0 + ( 2.0*L2 ) ) / 6.0;\n\t\tAK[ 3 ] = -( (3*L3)+ (36*L) - (22*L2) - 12 ) * ONEO12;\n\t\tAK[ 4 ] = ( 60.0 + (350.0*L2) - (300.0*L) - (125.0*L3) + (12.0*L4) ) / 60.0; // eslint-disable-line max-len\n\t\tAK[ 5 ] = -(-120 - (274*L4) + (900*L) - (1700*L2) + (1125*L3) + (20*L5)) * ONEO120; // eslint-disable-line max-len\n\t\tla += ( L * r * evalpoly( AK, r ) );\n\t}\n\tr = 1.0;\n\tif (\n\t\t( eta > -3.5 && eta < -0.03 ) ||\n\t\t( eta > 0.03 && eta < 40.0 )\n\t) {\n\t\tr = 1.0;\n\t\tq = la;\n\t\tdo {\n\t\t\tla = q * ( s+ln(q) ) / ( q-1.0 );\n\t\t\tr = abs( ( q/la ) - 1.0 );\n\t\t\tq = la;\n\t\t} while ( r > THRESHOLD );\n\t}\n\treturn la;\n}\n\n\n// EXPORTS //\n\nmodule.exports = lambdaeta;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\n// Chebyshev polynomial coefficients...\nvar A = [\n\t1.996379051590076518221,\n\t-0.17971032528832887213e-2,\n\t0.131292857963846713e-4,\n\t-0.2340875228178749e-6,\n\t0.72291210671127e-8,\n\t-0.3280997607821e-9,\n\t0.198750709010e-10,\n\t-0.15092141830e-11,\n\t0.1375340084e-12,\n\t-0.145728923e-13,\n\t0.17532367e-14,\n\t-0.2351465e-15,\n\t0.346551e-16,\n\t-0.55471e-17,\n\t0.9548e-18,\n\t-0.1748e-18,\n\t0.332e-19,\n\t-0.58e-20\n];\n\n\n// MAIN //\n\n/**\n* Computes the sum of a Chebyshev polynomial.\n*\n* @private\n* @param {PositiveInteger} n - degree of polynomial\n* @param {number} t - input value\n* @returns {number} Chebyshev sum\n*/\nfunction chepolsum( n, t ) {\n\tvar tt;\n\tvar u0;\n\tvar u1;\n\tvar u2;\n\tvar k;\n\n\tu0 = 0.0;\n\tu1 = 0.0;\n\ttt = t + t;\n\tk = n;\n\tdo {\n\t\tu2 = u1;\n\t\tu1 = u0;\n\t\tu0 = ( tt*u1 ) - u2 + A[ k ];\n\t\tk -= 1;\n\t} while ( k >= 0 );\n\treturn ( u0-u2 ) / 2.0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = chepolsum;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.025721014990011306;\n\t}\n\treturn 0.025721014990011306 + (x * (0.08247596616699963 + (x * (-0.0025328157302663564 + (x * (0.0006099292666946337 + (x * (-0.00033543297638406 + (x * 0.000250505279903))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.08333333333333333;\n\t}\n\treturn 0.08333333333333333 + (x * (-0.002777777777777778 + (x * (0.0007936507936507937 + (x * -0.0005952380952380953))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gammaln = require( '@stdlib/math-base-special-gammaln' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar LN_SQRT_TWO_PI = require( '@stdlib/constants-float64-ln-sqrt-two-pi' );\nvar SMALLEST_FLOAT32 = require( '@stdlib/constants-float32-smallest-normal' );\nvar MAX_FLOAT32 = require( '@stdlib/constants-float32-max' );\nvar chepolsum = require( './chepolsum.js' );\nvar polyvalC = require( './polyval_c.js' );\nvar polyvalD = require( './polyval_d.js' );\n\n\n// VARIABLES //\n\nvar C6 = 0.30865217988013567769;\n\n\n// MAIN //\n\n/**\n* Computes the Stirling series corresponding to asymptotic series for the logarithm of the gamma function.\n*\n* ```tex\n* \\frac{1}{12x}-\\frac{1}{360x^3}\\ldots; x \\ge 3\n* ```\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction stirling( x ) {\n\tvar z;\n\tif ( x < SMALLEST_FLOAT32 ) {\n\t\treturn MAX_FLOAT32;\n\t}\n\tif ( x < 1.0 ) {\n\t\treturn gammaln( x+1.0 ) - ( (x+0.5) * ln(x) ) + x - LN_SQRT_TWO_PI;\n\t}\n\tif ( x < 2.0 ) {\n\t\treturn gammaln( x ) - ( (x-0.5) * ln(x) ) + x - LN_SQRT_TWO_PI;\n\t}\n\tif ( x < 3.0 ) {\n\t\treturn gammaln( x-1.0 ) - ( (x-0.5) * ln(x) ) + x - LN_SQRT_TWO_PI + ln( x-1.0 ); // eslint-disable-line max-len\n\t}\n\tif ( x < 12.0 ) {\n\t\tz = ( 18.0/( x*x ) ) - 1.0;\n\t\treturn chepolsum( 17, z ) / ( 12.0*x );\n\t}\n\tz = 1.0 / ( x * x );\n\tif ( x < 1000.0 ) {\n\t\treturn polyvalC( z ) / ( C6+z ) / x;\n\t}\n\treturn polyvalD( z ) / x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = stirling;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar gamma = require( '@stdlib/math-base-special-gamma' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar FLOAT32_MAX = require( '@stdlib/constants-float32-max' );\nvar SQRT_TWO_PI = require( '@stdlib/constants-float64-sqrt-two-pi' );\nvar stirling = require( './stirling.js' );\n\n\n// MAIN //\n\n/**\n* Computes the regulated gamma function.\n*\n* @private\n* @param {number} x - input value\n* @returns {number} function value\n*/\nfunction gamstar( x ) {\n\tif ( x >= 3.0 ) {\n\t\treturn exp( stirling(x) );\n\t}\n\tif ( x > 0.0 ) {\n\t\treturn gamma(x) / ( exp( -x + ( ( x-0.5 ) * ln(x) ) ) * SQRT_TWO_PI );\n\t}\n\t// Case: x <= 0.0\n\treturn FLOAT32_MAX;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gamstar;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.3333333333438;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.3333333333438 + (x * (-0.2070740359969 + (x * (-0.05041806657154 + (x * (-0.004923635739372 + (x * -0.00004293658292782))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.7045554412463 + (x * (0.2118190062224 + (x * (0.03048648397436 + (x * 0.001605037988091))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.00004293658292782 + (x * (-0.004923635739372 + (x * (-0.05041806657154 + (x * (-0.2070740359969 + (x * -0.3333333333438))))))); // eslint-disable-line max-len\n\t\ts2 = 0.001605037988091 + (x * (0.03048648397436 + (x * (0.2118190062224 + (x * (0.7045554412463 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalrational;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar lambdaeta = require( './lambdaeta.js' );\nvar rateval = require( './rational_ak0bk0.js' );\n\n\n// MAIN //\n\n/**\n* Evaluates the `eps1` function.\n*\n* @private\n* @param {number} eta - eta value\n* @returns {number} function value\n*/\nfunction eps1( eta ) {\n\tvar la;\n\tif ( abs( eta ) < 1.0 ) {\n\t\treturn rateval( eta );\n\t}\n\tla = lambdaeta( eta );\n\treturn ln( eta / ( la - 1.0 ) ) / eta;\n}\n\n\n// EXPORTS //\n\nmodule.exports = eps1;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0172847633523;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0172847633523 + (x * (-0.0159372646475 + (x * (-0.00464910887221 + (x * (-0.00060683488776 + (x * -0.00000614830384279))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.764050615669 + (x * (0.297143406325 + (x * (0.0579490176079 + (x * 0.00574558524851))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.00000614830384279 + (x * (-0.00060683488776 + (x * (-0.00464910887221 + (x * (-0.0159372646475 + (x * -0.0172847633523))))))); // eslint-disable-line max-len\n\t\ts2 = 0.00574558524851 + (x * (0.0579490176079 + (x * (0.297143406325 + (x * (0.764050615669 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalrational;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0172839517431;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0172839517431 + (x * (-0.0146362417966 + (x * (-0.00357406772616 + (x * (-0.000391032032692 + (x * 0.00000249634036069))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.690560400696 + (x * (0.249962384741 + (x * (0.0443843438769 + (x * 0.00424073217211))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.00000249634036069 + (x * (-0.000391032032692 + (x * (-0.00357406772616 + (x * (-0.0146362417966 + (x * -0.0172839517431))))))); // eslint-disable-line max-len\n\t\ts2 = 0.00424073217211 + (x * (0.0443843438769 + (x * (0.249962384741 + (x * (0.690560400696 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalrational;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.99994466948;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.99994466948 + (x * (104.649839762 + (x * (857.204033806 + (x * (731.901559577 + (x * 45.5174411671))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (104.526456943 + (x * (823.313447808 + (x * (3119.93802124 + (x * 3970.03311219))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 45.5174411671 + (x * (731.901559577 + (x * (857.204033806 + (x * (104.649839762 + (x * 0.99994466948))))))); // eslint-disable-line max-len\n\t\ts2 = 3970.03311219 + (x * (3119.93802124 + (x * (823.313447808 + (x * (104.526456943 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalrational;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar rateval1 = require( './rational_ak1bk1.js' );\nvar rateval2 = require( './rational_ak2bk2.js' );\nvar rateval3 = require( './rational_ak3bk3.js' );\n\n\n// MAIN //\n\n/**\n* Evaluates the `eps2` function.\n*\n* @private\n* @param {number} eta - eta value\n* @returns {number} function value\n*/\nfunction eps2( eta ) {\n\tvar lnmeta;\n\tvar x;\n\tif ( eta < -5.0 ) {\n\t\tx = eta * eta;\n\t\tlnmeta = ln( -eta );\n\t\treturn ( 12.0 - x - ( 6.0*( lnmeta*lnmeta ) ) ) / ( 12.0*x*eta );\n\t}\n\tif ( eta < -2.0 ) {\n\t\treturn rateval1( eta );\n\t}\n\tif ( eta < 2.0 ) {\n\t\treturn rateval2( eta );\n\t}\n\tif ( eta < 1000.0 ) {\n\t\tx = 1.0 / eta;\n\t\treturn rateval3( eta ) / ( -12.0*eta );\n\t}\n\treturn -1.0 / ( 12.0 * eta );\n}\n\n\n// EXPORTS //\n\nmodule.exports = eps2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.0495346498136;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.0495346498136 + (x * (0.0299521337141 + (x * (0.00688296911516 + (x * (0.000512634846317 + (x * -0.0000201411722031))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.759803615283 + (x * (0.261547111595 + (x * (0.0464854522477 + (x * 0.00403751193496))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.0000201411722031 + (x * (0.000512634846317 + (x * (0.00688296911516 + (x * (0.0299521337141 + (x * 0.0495346498136))))))); // eslint-disable-line max-len\n\t\ts2 = 0.00403751193496 + (x * (0.0464854522477 + (x * (0.261547111595 + (x * (0.759803615283 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalrational;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.00452313583942;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.00452313583942 + (x * (0.00120744920113 + (x * (-0.0000789724156582 + (x * (-0.0000504476066942 + (x * -0.00000535770949796))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.912203410349 + (x * (0.405368773071 + (x * (0.0901638932349 + (x * 0.00948935714996))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.00000535770949796 + (x * (-0.0000504476066942 + (x * (-0.0000789724156582 + (x * (0.00120744920113 + (x * 0.00452313583942))))))); // eslint-disable-line max-len\n\t\ts2 = 0.00948935714996 + (x * (0.0901638932349 + (x * (0.405368773071 + (x * (0.912203410349 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalrational;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.00439937562904;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.00439937562904 + (x * (0.000487225670639 + (x * (-0.000128470657374 + (x * (0.00000529110969589 + (x * 1.5716677175e-7))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.794435257415 + (x * (0.333094721709 + (x * (0.0703527806143 + (x * 0.00806110846078))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 1.5716677175e-7 + (x * (0.00000529110969589 + (x * (-0.000128470657374 + (x * (0.000487225670639 + (x * 0.00439937562904))))))); // eslint-disable-line max-len\n\t\ts2 = 0.00806110846078 + (x * (0.0703527806143 + (x * (0.333094721709 + (x * (0.794435257415 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalrational;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0011481191232;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0011481191232 + (x * (-0.112850923276 + (x * (1.51623048511 + (x * (-0.218472031183 + (x * 0.0730002451555))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (14.2482206905 + (x * (69.7360396285 + (x * (218.938950816 + (x * 277.067027185))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0730002451555 + (x * (-0.218472031183 + (x * (1.51623048511 + (x * (-0.112850923276 + (x * -0.0011481191232))))))); // eslint-disable-line max-len\n\t\ts2 = 277.067027185 + (x * (218.938950816 + (x * (69.7360396285 + (x * (14.2482206905 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalrational;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.000145727889667;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.000145727889667 + (x * (-0.290806748131 + (x * (-13.308504545 + (x * (199.722374056 + (x * -11.4311378756))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (139.612587808 + (x * (2189.01116348 + (x * (7115.24019009 + (x * 45574.6081453))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -11.4311378756 + (x * (199.722374056 + (x * (-13.308504545 + (x * (-0.290806748131 + (x * -0.000145727889667))))))); // eslint-disable-line max-len\n\t\ts2 = 45574.6081453 + (x * (7115.24019009 + (x * (2189.01116348 + (x * (139.612587808 + (x * 1.0))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalrational;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar rational1 = require( './rational_ak4bk4.js' );\nvar rational2 = require( './rational_ak5bk5.js' );\nvar rational3 = require( './rational_ak6bk6.js' );\nvar rational4 = require( './rational_ak7bk7.js' );\nvar rational5 = require( './rational_ak8bk8.js' );\n\n\n// MAIN //\n\n/**\n* Evaluates the `eps3` function.\n*\n* @private\n* @param {number} eta - eta value\n* @returns {number} function value\n*/\nfunction eps3( eta ) {\n\tvar x;\n\tvar y;\n\n\tif ( eta < -8.0 ) {\n\t\tx = eta * eta;\n\t\ty = ln( -eta ) / eta;\n\t\treturn ( -30.0 + ( eta*y*( (6.0*x*y*y)-12.0+x ) ) ) / ( 12.0*eta*x*x );\n\t}\n\tif ( eta < -4.0 ) {\n\t\treturn rational1( eta ) / ( eta*eta );\n\t}\n\tif ( eta < -2.0 ) {\n\t\treturn rational2( eta );\n\t}\n\tif ( eta < 2.0 ) {\n\t\treturn rational3( eta );\n\t}\n\tif ( eta < 10.0 ) {\n\t\tx = 1.0 / eta;\n\t\treturn rational4( x ) / ( eta*eta );\n\t}\n\tif ( eta < 100.0 ) {\n\t\tx = 1.0 / eta;\n\t\treturn rational5( x ) / ( eta*eta );\n\t}\n\treturn -ln( eta ) / ( 12.0*eta*eta*eta );\n}\n\n\n// EXPORTS //\n\nmodule.exports = eps3;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-statements */\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar evalpoly = require( '@stdlib/math-base-tools-evalpoly' );\nvar gammaln = require( '@stdlib/math-base-special-gammaln' );\nvar erfcinv = require( '@stdlib/math-base-special-erfcinv' );\nvar gamma = require( '@stdlib/math-base-special-gamma' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar min = require( '@stdlib/math-base-special-min' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar SQRT_TWO_PI = require( '@stdlib/constants-float64-sqrt-two-pi' );\nvar MAX_FLOAT32 = require( '@stdlib/constants-float32-max' );\nvar TWO_PI = require( '@stdlib/constants-float64-two-pi' );\nvar higherNewton = require( './higher_newton.js' );\nvar lambdaeta = require( './lambdaeta.js' );\nvar gamstar = require( './gamstar.js' );\nvar eps1 = require( './eps1.js' );\nvar eps2 = require( './eps2.js' );\nvar eps3 = require( './eps3.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'gammaincinv:compute' );\nvar HALF = 0.5;\nvar ONEO3 = 0.333333333333333333333333333333;\nvar ONEO4 = 0.25;\nvar ONEO5 = 0.2;\nvar ONEO6 = 0.166666666666666666666666666667;\nvar ONEO12 = 0.0833333333333333333333333333333;\nvar ONEO24 = 0.0416666666666666666666666666667;\n\n// Coefficient workspace:\nvar CK = [ 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Computes `x` in the equations `P(a,xr) = p` and `Q(a,xr) = q`, where `a` is a positive parameter and `p` and `q` satisfy `p+q = 1`.\n*\n* ## Notes\n*\n* -   The equation is inverted with `min(p,q)`.\n*\n* @private\n* @param {number} a - scale value of incomplete gamma function\n* @param {Probability} p - probability value\n* @param {Probability} q - probability value\n* @returns {number} solution of the equations `P(a,xr) = p` and `Q(a,xr) = q` where `a` is a positive parameter\n*/\nfunction compute( a, p, q ) {\n\tvar ap1inv;\n\tvar invfp;\n\tvar lgama;\n\tvar pcase;\n\tvar porq;\n\tvar ainv;\n\tvar logr;\n\tvar ap22;\n\tvar ap14;\n\tvar ap13;\n\tvar ap12;\n\tvar vgam;\n\tvar vmin;\n\tvar xini;\n\tvar ap1;\n\tvar ap2;\n\tvar ap3;\n\tvar eta;\n\tvar p6;\n\tvar p5;\n\tvar x0;\n\tvar a2;\n\tvar L2;\n\tvar L3;\n\tvar L4;\n\tvar b2;\n\tvar b3;\n\tvar p3;\n\tvar a4;\n\tvar fp;\n\tvar p4;\n\tvar p2;\n\tvar a3;\n\tvar xr;\n\tvar ck;\n\tvar b;\n\tvar L;\n\tvar i;\n\tvar k;\n\tvar m;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar y;\n\n\tif ( p < HALF ) {\n\t\tpcase = true;\n\t\tporq = p;\n\t\ts = -1.0;\n\t} else {\n\t\tpcase = false;\n\t\tporq = q;\n\t\ts = 1.0;\n\t}\n\tk = 0;\n\tif ( abs( a-1.0 ) < 1.0e-4 ) {\n\t\tm = 0;\n\t\tif ( pcase ) {\n\t\t\tif ( p < 1.0e-3 ) {\n\t\t\t\tp2 = p * p;\n\t\t\t\tp3 = p2 * p;\n\t\t\t\tp4 = p3 * p;\n\t\t\t\tp5 = p4 * p;\n\t\t\t\tp6 = p5 * p;\n\t\t\t\tx0 = p + ( p2*HALF ) + ( p3*(ONEO3) ) + ( p4*ONEO4 ) + ( p5*ONEO5 ) + ( p6*(ONEO6) ); // eslint-disable-line max-len\n\t\t\t} else {\n\t\t\t\tx0 = -ln( 1.0-p );\n\t\t\t}\n\t\t} else {\n\t\t\tx0 = -ln( q );\n\t\t}\n\t\tif ( a === 1.0 ) {\n\t\t\tk = 2;\n\t\t\txr = x0;\n\t\t} else {\n\t\t\tlgama = gammaln( a );\n\t\t\tk = 1;\n\t\t}\n\t}\n\tif ( q < 1.0e-30 && a < HALF ) {\n\t\tm = 0;\n\t\tx0 = -ln( q*gamma(a) ) + ( ( a-1.0 ) * ln( -ln( q*gamma(a) ) ) );\n\t\tk = 1;\n\t\tlgama = gammaln( a );\n\t}\n\tif ( a > 1.0 && a < 500.0 && p < 1.0e-80 ) {\n\t\tm = 0;\n\t\tainv = 1.0 / a;\n\t\tap1inv = 1.0 / ( a+1.0 );\n\t\tx0 = ( gammaln( a+1.0 ) + ln( p ) ) * ainv;\n\t\tx0 = exp( x0 );\n\t\txini = x0;\n\t\tfor ( i = 0; i < 10; i++ ) {\n\t\t\tx0 = xini * exp( x0*ainv ) * pow( 1.0-( x0*ap1inv ), ainv );\n\t\t}\n\t\tk = 1;\n\t\tlgama = gammaln( a );\n\t}\n\n\tlogr = (1.0/a) * ( ln(p) + gammaln( a+1.0 ) );\n\tif ( ( logr < ln( ONEO5 * ( 1.0+a ) ) ) && ( k === 0 ) ) {\n\t\tr = exp( logr );\n\t\tm = 0;\n\t\ta2 = a * a;\n\t\ta3 = a2 * a;\n\t\ta4 = a3 * a;\n\t\tap1 = a + 1.0;\n\t\tap12 = ap1 * ap1;\n\t\tap13 = ap1 * ap12;\n\t\tap14 = ap12 * ap12;\n\t\tap2 = a + 2.0;\n\t\tap22 = ap2 * ap2;\n\t\tap3 = a + 3.0;\n\t\tCK[ 0 ] = 1.0;\n\t\tCK[ 1 ] = 1.0 / ap1;\n\t\tCK[ 2 ] = HALF * ( ( 3.0*a ) + 5.0 ) / ( ap12*ap2 );\n\t\tCK[ 3 ] = ONEO3 * ( 31.0 + (8.0*a2) + (33.0*a) ) / ( ap13*ap2*ap3 );\n\t\tCK[ 4 ] = ONEO24 * ( 2888.0 + (1179.0*a3) + (125.0*a4) + (3971.0*a2) + (5661.0*a) ) / ( ap14*ap22*ap3*( a+4.0 ) ); // eslint-disable-line max-len\n\t\tx0 = r * evalpoly( CK, r );\n\t\tlgama = gammaln( a );\n\t\tk = 1;\n\t}\n\tif ( ( a < 10.0 ) && ( k === 0 ) ) {\n\t\tvgam = sqrt( a ) / ( gamstar(a)*SQRT_TWO_PI );\n\t\tvmin = min( 0.02, vgam );\n\t\tif ( q < vmin ) {\n\t\t\tm = 0;\n\t\t\tb = 1.0 - a;\n\t\t\tb2 = b * b;\n\t\t\tb3 = b2 * b;\n\t\t\teta = sqrt( -2.0/a * ln( q/vgam ) );\n\t\t\tx0 = a * lambdaeta( eta );\n\t\t\tL = ln( x0 );\n\t\t\tif ( x0 > 5.0 ) {\n\t\t\t\tL2 = L * L;\n\t\t\t\tL3 = L2 * L;\n\t\t\t\tL4 = L3 * L;\n\t\t\t\tr = 1.0 / x0;\n\t\t\t\tCK[ 0 ] = L - 1.0;\n\t\t\t\tCK[ 1 ] = ( (3.0*b) - (2.0*b*L) + L2 - ( 2.0*L ) + 2.0 ) * HALF;\n\t\t\t\tCK[ 2 ] =( (24.0*b*L) - (11.0*b2) - (24.0*b) - (6.0*L2) + (12.0*L) - 12.0 - (9.0*b*L2) + (6.0*b2*L) + (2.0*L3) ) * ONEO6; // eslint-disable-line max-len\n\t\t\t\tCK[ 3 ] = ( (-12.0*b3*L) + (8.04*b*L2) - (114.0*b2*L) + (72.0+(36.0*L2)) + (((3.0*L4)-(72.0*L)+162.0) * (b-(168.0*b*L))) - ((12.0*L3)+(25.0*b3)) - ( (22.0*b*L3)+(36.0*b2*L2)+(120.0*b2) ) ) * ONEO12; // eslint-disable-line max-len\n\t\t\t\tCK[ 4 ] = 0.0;\n\t\t\t\tx0 = x0 - L + ( b*r*evalpoly( CK, r ) );\n\t\t\t} else {\n\t\t\t\tr = 1.0 / x0;\n\t\t\t\tL2 = L * L;\n\t\t\t\tck = L - 1.0;\n\t\t\t\tt = L - (b*r*ck);\n\t\t\t\tif ( t < x0 ) {\n\t\t\t\t\tx0 -= t;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlgama = gammaln( a );\n\t\t\tk = 1;\n\t\t}\n\t}\n\tif ( ( abs( porq-HALF ) < 1.0e-5 ) && ( k === 0 ) ) {\n\t\tm = 0;\n\t\tainv = 1.0 / a;\n\t\tx0 = a - ONEO3 + ( ( 0.0197530864197530864197530864198 +\n\t\t\t( 0.00721144424848128551832255535959*ainv ) ) * ainv );\n\t\tlgama = gammaln( a );\n\t\tk = 1;\n\t}\n\tif ( ( a < 1.0 ) && ( k === 0 ) ) {\n\t\tm = 0;\n\t\tif ( pcase ) {\n\t\t\tx0 = exp( (1.0/a) * ( ln(porq) + gammaln(a+1.0) ) );\n\t\t} else {\n\t\t\tx0 = exp( (1.0/a) * ( ln(1.0-porq) + gammaln(a+1.0) ) );\n\t\t}\n\t\tlgama = gammaln( a );\n\t\tk = 1;\n\t}\n\tif ( k === 0 ) {\n\t\tm = 1;\n\t\tainv = 1.0 / a;\n\t\tr = erfcinv( 2.0 * porq );\n\t\teta = s * r / sqrt( a*HALF );\n\t\tif ( r < MAX_FLOAT32 ) {\n\t\t\teta += ( eps1(eta) + ( (eps2(eta)+(eps3(eta)*ainv))*ainv ) ) * ainv;\n\t\t\tx0 = a * lambdaeta(eta);\n\t\t\ty = eta;\n\t\t\tfp = -sqrt( a/TWO_PI ) * exp( -HALF*a*y*y ) / ( gamstar(a) );\n\t\t\tinvfp = 1.0 / fp;\n\t\t} else {\n\t\t\tdebug( 'Warning: Overflow problems in one or more steps of the computation.' );\n\t\t\treturn NaN;\n\t\t}\n\t}\n\tif ( k < 2 ) {\n\t\txr = higherNewton( x0, a, m, p, q, lgama, invfp, pcase );\n\t}\n\treturn xr;\n}\n\n\n// EXPORTS //\n\nmodule.exports = compute;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* Translated from the Fortran module by\n* ----------------------------------------------------------------------\n* Authors:\n*  Amparo Gil    (U. Cantabria, Santander, Spain)\n*                 e-mail: amparo.gil@unican.es\n*  Javier Segura (U. Cantabria, Santander, Spain)\n*                 e-mail: javier.segura@unican.es\n*  Nico M. Temme (CWI, Amsterdam, The Netherlands)\n*                 e-mail: nico.temme@cwi.nl\n* ---------------------------------------------------------------------\n*/\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar FLOAT32_SMALLEST = require( '@stdlib/constants-float32-smallest-normal' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar compute = require( './compute.js' );\n\n\n// MAIN //\n\n/**\n* Inverts the lower gamma function; i.e., computes `xr` such that `P(a,xr) = p`.\n*\n* ## Method\n*\n* The present code uses different methods of computation depending on the values of the input values: Taylor, asymptotic expansions and high-order Newton methods.\n*\n* ## Notes\n*\n* -   The claimed accuracy obtained using this inversion routine is near `1e-12`.\n*\n* ## References\n*\n* -   A. Gil, J. Segura and N.M. Temme, GammaCHI: a package for the inversion and computation of the gamma and chi-square distribution functions (central and noncentral). Computer Physics Commun\n* -   A. Gil, J. Segura and N.M. Temme. Efficient and accurate algorithms for the computation and inversion of the incomplete gamma function ratios. SIAM J Sci Comput. (2012) 34(6), A2965-A2981\n*\n* @param {Probability} p - probability value\n* @param {number} a - scale parameter\n* @param {boolean} [upper=false] - boolean indicating if the function should invert the upper tail of the incomplete gamma function instead; i.e., compute `xr` such that `Q(a,xr) = p`.\n* @returns {number} function value of the inverse\n*/\nfunction gammaincinv( p, a, upper ) {\n\tif ( isnan( p ) || isnan( a ) ) {\n\t\treturn NaN;\n\t}\n\tif ( a < FLOAT32_SMALLEST ) {\n\t\treturn NaN;\n\t}\n\tif ( p > 1.0 || p < 0.0 ) {\n\t\treturn NaN;\n\t}\n\t// Case: invert upper gamma function\n\tif ( upper === true ) {\n\t\tif ( p === 0.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tif ( p === 1.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn compute( a, 1.0-p, p );\n\t}\n\t// Default: invert lower gamma function\n\tif ( p === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn PINF;\n\t}\n\treturn compute( a, p, 1.0-p );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gammaincinv;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the inverse of the lower incomplete gamma function.\n*\n* @module @stdlib/math-base-special-gammaincinv\n*\n* @example\n* var gammaincinv = require( '@stdlib/math-base-special-gammaincinv' );\n*\n* var val = gammaincinv( 0.5, 2.0 );\n* // returns ~1.678\n*\n* val = gammaincinv( 0.1, 10.0 );\n* // returns ~6.221\n*\n* val = gammaincinv( 0.75, 3.0 );\n* // returns ~3.92\n*\n* val = gammaincinv( 0.75, 3.0, true );\n* // returns ~1.727\n*\n* val = gammaincinv( 0.75, NaN );\n* // returns NaN\n*\n* val = gammaincinv( NaN, 3.0 );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAS,QAAS,OAAQ,EAC1BC,GAAW,QAAS,oCAAqC,EACzDC,GAAM,QAAS,+BAAgC,EAC/CC,GAAM,QAAS,+BAAgC,EAC/CC,GAAK,QAAS,8BAA+B,EAC7CC,GAAc,QAAS,+BAAgC,EAKvDC,GAAQN,GAAQ,2BAA4B,EAmBhD,SAASO,GAAcC,EAAIC,EAAGC,EAAGC,EAAGC,EAAGC,EAAOC,EAAOC,EAAQ,CAC5D,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJA,EAAIrB,EACJkB,EAAI,EACJC,EAAI,EACJN,EAAKZ,EAAIA,EACTQ,EAAOT,EACP,EAAG,CAGF,GAFAqB,EAAIrB,EACJc,EAAKO,EAAIA,EACJnB,IAAM,EAAI,CAEd,GADAM,GAAW,EAAIP,GAAML,GAAIyB,CAAE,EAAMA,EAAIhB,EAChCG,EAAOZ,GAAIC,EAAY,EAC3B,OAAAC,GAAO,wHAAyH,EACzHW,EAERW,EAAIzB,GAAKa,CAAK,CACf,MACCY,EAAI,CAACd,EAAQe,EAETd,GAEJQ,EAAKtB,GAAU4B,EAAGpB,EAAG,GAAM,EAAM,EACjCS,EAAM,CAACU,GAAML,EAAKZ,KAGlBa,EAAKvB,GAAU4B,EAAGpB,EAAG,GAAM,EAAK,EAChCS,EAAMU,GAAMJ,EAAKZ,IAElBgB,EAAIV,EACGP,EAAI,QAAcgB,EAAI,GAC5BR,EAAM,IAAQU,EAAIpB,EAAI,GAAQoB,EAC9BT,GAAS,EAAEE,EAAO,EAAEO,EAAEpB,EAAM,EAAEoB,EAAM,EAAER,EAAO,EAAEZ,EAAK,GAAMa,EAC1DF,GAAO,EACPZ,EAAKqB,EAAMD,GAAM,EAAQA,GAAMT,EAAOS,EAAER,KAExCZ,EAAKqB,EAAID,EAEVF,EAAIxB,GAAO2B,EAAErB,EAAO,CAAI,EACxBmB,GAAK,EACLE,EAAIrB,EACCqB,EAAI,IACRA,EAAIZ,EACJU,EAAI,IAEN,OAAcD,EAAI,OAAaC,EAAI,IACnC,OAAOD,EAAI,OAAaC,EAAI,KAC3BrB,GAAO,+IAAgJ,EAExJmB,EAAKI,GAAK,EACHJ,CACR,CAKA1B,GAAO,QAAUQ,KCzHjB,IAAAuB,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAoCA,SAASC,GAAUC,EAAI,CACtB,OAAKA,IAAM,EACH,EAED,EAAOA,GAAK,EAAOA,GAAK,EAAOA,GAAK,IAAOA,GAAK,mBAAsBA,GAAK,kBAAqBA,EAAI,SAC5G,CAKAF,GAAO,QAAUC,KC9CjB,IAAAE,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAoCA,SAASC,GAAUC,EAAI,CACtB,OAAKA,IAAM,EACH,EAED,EAAOA,GAAK,EAAOA,GAAK,kBAAsBA,GAAK,oBAAwBA,GAAK,qBAAyBA,GAAK,qBAAyBA,EAAI,yBACnJ,CAKAF,GAAO,QAAUC,KC9CjB,IAAAE,EAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAM,QAAS,+BAAgC,EAC/CC,GAAM,QAAS,+BAAgC,EAC/CC,GAAK,QAAS,8BAA+B,EAC7CC,GAAW,QAAS,kCAAmC,EACvDC,GAAa,KACbC,GAAa,KAKbC,GAAY,KACZC,GAAS,mBACTC,GAAU,oBAGVC,EAAK,CAAE,EAAK,EAAK,EAAK,EAAK,EAAK,CAAI,EAYxC,SAASC,GAAWC,EAAM,CACzB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EA+BJ,GA7BAA,EAAIT,EAAMA,EAAM,GACXA,IAAQ,EACZK,EAAK,EAEIL,EAAM,IACfQ,EAAIlB,GAAK,GAAOmB,CAAE,EAClBJ,EAAKZ,GAAYe,CAAE,GAEVR,EAAM,GACfQ,EAAIR,EACJK,EAAKX,GAAYc,CAAE,IAGnBA,EAAI,GAAOC,EACXH,EAAIf,GAAIiB,CAAE,EACVH,EAAKG,EAAIF,EACTE,EAAI,EAAMA,EACVP,EAAKK,EAAIA,EACTJ,EAAKD,EAAKK,EACVH,EAAKD,EAAKI,EACVF,EAAKD,EAAKG,EACVR,EAAI,CAAE,GAAM,EAAIQ,GAAM,GACtBR,EAAI,CAAE,GAAQ,GAAKQ,EAAM,EAAQ,EAAIL,GAAS,EAC9CH,EAAI,CAAE,EAAI,EAAI,EAAEI,EAAM,GAAGI,EAAM,GAAGL,EAAM,IAAOL,GAC/CE,EAAI,CAAE,GAAM,GAAQ,IAAMG,EAAO,IAAMK,EAAM,IAAMJ,EAAO,GAAKC,GAAQ,GACvEL,EAAI,CAAE,EAAI,EAAE,KAAQ,IAAIK,EAAO,IAAIG,EAAM,KAAKL,EAAO,KAAKC,EAAO,GAAGE,GAAOP,GAC3EQ,GAAQC,EAAIE,EAAIhB,GAAUM,EAAIU,CAAE,GAEjCA,EAAI,EAEDR,EAAM,MAAQA,EAAM,MACpBA,EAAM,KAAQA,EAAM,GACrB,CACDQ,EAAI,EACJD,EAAIF,EACJ,GACCA,EAAKE,GAAME,EAAElB,GAAGgB,CAAC,IAAQA,EAAE,GAC3BC,EAAInB,GAAOkB,EAAEF,EAAO,CAAI,EACxBE,EAAIF,QACKG,EAAIb,GACf,CACA,OAAOU,CACR,CAKAjB,GAAO,QAAUW,KC3GjB,IAAAW,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAuBA,IAAIC,GAAI,CACP,mBACA,sBACA,sBACA,sBACA,mBACA,mBACA,gBACA,gBACA,eACA,eACA,aACA,aACA,WACA,WACA,SACA,UACA,QACA,OACD,EAaA,SAASC,GAAWC,EAAGC,EAAI,CAC1B,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJH,EAAK,EACLC,EAAK,EACLF,EAAKD,EAAIA,EACTK,EAAIN,EACJ,GACCK,EAAKD,EACLA,EAAKD,EACLA,EAAOD,EAAGE,EAAOC,EAAKP,GAAGQ,CAAE,EAC3BA,GAAK,QACIA,GAAK,GACf,OAASH,EAAGE,GAAO,CACpB,CAKAR,GAAO,QAAUE,KC9EjB,IAAAQ,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAoCA,SAASC,GAAUC,EAAI,CACtB,OAAKA,IAAM,EACH,oBAED,oBAAwBA,GAAK,mBAAuBA,GAAK,sBAA0BA,GAAK,qBAAyBA,GAAK,oBAAwBA,EAAI,oBAC1J,CAKAF,GAAO,QAAUC,KC9CjB,IAAAE,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAoCA,SAASC,GAAUC,EAAI,CACtB,OAAKA,IAAM,EACH,mBAED,mBAAuBA,GAAK,qBAAyBA,GAAK,qBAAyBA,EAAI,uBAC/F,CAKAF,GAAO,QAAUC,KC9CjB,IAAAE,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,EAAU,QAAS,mCAAoC,EACvDC,EAAK,QAAS,8BAA+B,EAC7CC,GAAiB,QAAS,0CAA2C,EACrEC,GAAmB,QAAS,2CAA4C,EACxEC,GAAc,QAAS,+BAAgC,EACvDC,GAAY,KACZC,GAAW,KACXC,GAAW,KAKXC,GAAK,mBAgBT,SAASC,GAAUC,EAAI,CACtB,IAAIC,EACJ,OAAKD,EAAIP,GACDC,GAEHM,EAAI,EACDV,EAASU,EAAE,CAAI,GAAOA,EAAE,IAAOT,EAAGS,CAAC,EAAMA,EAAIR,GAEhDQ,EAAI,EACDV,EAASU,CAAE,GAAOA,EAAE,IAAOT,EAAGS,CAAC,EAAMA,EAAIR,GAE5CQ,EAAI,EACDV,EAASU,EAAE,CAAI,GAAOA,EAAE,IAAOT,EAAGS,CAAC,EAAMA,EAAIR,GAAiBD,EAAIS,EAAE,CAAI,EAE3EA,EAAI,IACRC,EAAM,IAAOD,EAAEA,GAAQ,EAChBL,GAAW,GAAIM,CAAE,GAAM,GAAKD,KAEpCC,EAAI,GAAQD,EAAIA,GACXA,EAAI,IACDJ,GAAUK,CAAE,GAAMH,GAAGG,GAAMD,EAE5BH,GAAUI,CAAE,EAAID,EACxB,CAKAX,GAAO,QAAUU,KC9EjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAM,QAAS,+BAAgC,EAC/CC,GAAQ,QAAS,iCAAkC,EACnDC,GAAK,QAAS,8BAA+B,EAC7CC,GAAc,QAAS,+BAAgC,EACvDC,GAAc,QAAS,uCAAwC,EAC/DC,GAAW,KAYf,SAASC,GAASC,EAAI,CACrB,OAAKA,GAAK,EACFP,GAAKK,GAASE,CAAC,CAAE,EAEpBA,EAAI,EACDN,GAAMM,CAAC,GAAMP,GAAK,CAACO,GAAQA,EAAE,IAAQL,GAAGK,CAAC,CAAI,EAAIH,IAGlDD,EACR,CAKAJ,GAAO,QAAUO,KCrDjB,IAAAE,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAqCA,SAASC,GAAcC,EAAI,CAC1B,IAAIC,EACAC,EACAC,EACJ,OAAKH,IAAM,EACH,iBAEHA,EAAI,EACRC,EAAK,CAACD,EAENC,EAAKD,EAEDC,GAAM,GACVC,EAAK,gBAAoBF,GAAK,gBAAoBA,GAAK,iBAAqBA,GAAK,kBAAsBA,EAAI,sBAC3GG,EAAK,EAAOH,GAAK,eAAmBA,GAAK,eAAmBA,GAAK,gBAAoBA,EAAI,sBAEzFA,EAAI,EAAMA,EACVE,EAAK,mBAAwBF,GAAK,kBAAsBA,GAAK,iBAAqBA,GAAK,gBAAoBA,EAAI,mBAC/GG,EAAK,iBAAqBH,GAAK,gBAAoBA,GAAK,eAAmBA,GAAK,eAAmBA,EAAI,MAEjGE,EAAKC,EACb,CAKAL,GAAO,QAAUC,KC/DjB,IAAAK,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAM,QAAS,+BAAgC,EAC/CC,GAAK,QAAS,8BAA+B,EAC7CC,GAAY,IACZC,GAAU,KAYd,SAASC,GAAMC,EAAM,CACpB,IAAIC,EACJ,OAAKN,GAAKK,CAAI,EAAI,EACVF,GAASE,CAAI,GAErBC,EAAKJ,GAAWG,CAAI,EACbJ,GAAII,GAAQC,EAAK,EAAM,EAAID,EACnC,CAKAN,GAAO,QAAUK,KCjDjB,IAAAG,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAqCA,SAASC,GAAcC,EAAI,CAC1B,IAAIC,EACAC,EACAC,EACJ,OAAKH,IAAM,EACH,iBAEHA,EAAI,EACRC,EAAK,CAACD,EAENC,EAAKD,EAEDC,GAAM,GACVC,EAAK,gBAAoBF,GAAK,gBAAoBA,GAAK,iBAAqBA,GAAK,iBAAqBA,EAAI,qBAC1GG,EAAK,EAAOH,GAAK,cAAkBA,GAAK,cAAkBA,GAAK,eAAmBA,EAAI,qBAEtFA,EAAI,EAAMA,EACVE,EAAK,kBAAwBF,GAAK,iBAAqBA,GAAK,iBAAqBA,GAAK,gBAAoBA,EAAI,mBAC9GG,EAAK,gBAAoBH,GAAK,eAAmBA,GAAK,cAAkBA,GAAK,cAAkBA,EAAI,MAE7FE,EAAKC,EACb,CAKAL,GAAO,QAAUC,KC/DjB,IAAAK,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAqCA,SAASC,GAAcC,EAAI,CAC1B,IAAIC,EACAC,EACAC,EACJ,OAAKH,IAAM,EACH,iBAEHA,EAAI,EACRC,EAAK,CAACD,EAENC,EAAKD,EAEDC,GAAM,GACVC,EAAK,gBAAoBF,GAAK,gBAAoBA,GAAK,iBAAqBA,GAAK,kBAAsBA,EAAI,oBAC3GG,EAAK,EAAOH,GAAK,cAAkBA,GAAK,cAAkBA,GAAK,eAAmBA,EAAI,qBAEtFA,EAAI,EAAMA,EACVE,EAAK,iBAAuBF,GAAK,kBAAsBA,GAAK,iBAAqBA,GAAK,gBAAoBA,EAAI,mBAC9GG,EAAK,gBAAoBH,GAAK,eAAmBA,GAAK,cAAkBA,GAAK,cAAkBA,EAAI,MAE7FE,EAAKC,EACb,CAKAL,GAAO,QAAUC,KC/DjB,IAAAK,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAqCA,SAASC,GAAcC,EAAI,CAC1B,IAAIC,EACAC,EACAC,EACJ,OAAKH,IAAM,EACH,cAEHA,EAAI,EACRC,EAAK,CAACD,EAENC,EAAKD,EAEDC,GAAM,GACVC,EAAK,aAAiBF,GAAK,cAAiBA,GAAK,cAAiBA,GAAK,cAAiBA,EAAI,iBAC5FG,EAAK,EAAOH,GAAK,cAAiBA,GAAK,cAAiBA,GAAK,cAAiBA,EAAI,mBAElFA,EAAI,EAAMA,EACVE,EAAK,cAAiBF,GAAK,cAAiBA,GAAK,cAAiBA,GAAK,cAAiBA,EAAI,gBAC5FG,EAAK,cAAiBH,GAAK,cAAiBA,GAAK,cAAiBA,GAAK,cAAiBA,EAAI,MAEtFE,EAAKC,EACb,CAKAL,GAAO,QAAUC,KC/DjB,IAAAK,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAK,QAAS,8BAA+B,EAC7CC,GAAW,KACXC,GAAW,KACXC,GAAW,KAYf,SAASC,GAAMC,EAAM,CACpB,IAAIC,EACAC,EACJ,OAAKF,EAAM,IACVE,EAAIF,EAAMA,EACVC,EAASN,GAAI,CAACK,CAAI,GACT,GAAOE,EAAM,GAAMD,EAAOA,KAAiB,GAAKC,EAAEF,IAEvDA,EAAM,GACHJ,GAAUI,CAAI,EAEjBA,EAAM,EACHH,GAAUG,CAAI,EAEjBA,EAAM,KACVE,EAAI,EAAMF,EACHF,GAAUE,CAAI,GAAM,IAAMA,IAE3B,IAAS,GAAOA,EACxB,CAKAN,GAAO,QAAUK,KC7DjB,IAAAI,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAqCA,SAASC,GAAcC,EAAI,CAC1B,IAAIC,EACAC,EACAC,EACJ,OAAKH,IAAM,EACH,gBAEHA,EAAI,EACRC,EAAK,CAACD,EAENC,EAAKD,EAEDC,GAAM,GACVC,EAAK,eAAmBF,GAAK,eAAmBA,GAAK,gBAAoBA,GAAK,iBAAqBA,EAAI,qBACvGG,EAAK,EAAOH,GAAK,cAAkBA,GAAK,cAAkBA,GAAK,eAAmBA,EAAI,qBAEtFA,EAAI,EAAMA,EACVE,EAAK,kBAAuBF,GAAK,iBAAqBA,GAAK,gBAAoBA,GAAK,eAAmBA,EAAI,kBAC3GG,EAAK,gBAAoBH,GAAK,eAAmBA,GAAK,cAAkBA,GAAK,cAAkBA,EAAI,MAE7FE,EAAKC,EACb,CAKAL,GAAO,QAAUC,KC/DjB,IAAAK,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAqCA,SAASC,GAAcC,EAAI,CAC1B,IAAIC,EACAC,EACAC,EACJ,OAAKH,IAAM,EACH,iBAEHA,EAAI,EACRC,EAAK,CAACD,EAENC,EAAKD,EAEDC,GAAM,GACVC,EAAK,gBAAoBF,GAAK,gBAAoBA,GAAK,kBAAuBA,GAAK,kBAAuBA,EAAI,qBAC9GG,EAAK,EAAOH,GAAK,cAAkBA,GAAK,cAAkBA,GAAK,eAAmBA,EAAI,qBAEtFA,EAAI,EAAMA,EACVE,EAAK,kBAAwBF,GAAK,kBAAuBA,GAAK,kBAAuBA,GAAK,gBAAoBA,EAAI,mBAClHG,EAAK,gBAAoBH,GAAK,eAAmBA,GAAK,cAAkBA,GAAK,cAAkBA,EAAI,MAE7FE,EAAKC,EACb,CAKAL,GAAO,QAAUC,KC/DjB,IAAAK,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAqCA,SAASC,GAAcC,EAAI,CAC1B,IAAIC,EACAC,EACAC,EACJ,OAAKH,IAAM,EACH,iBAEHA,EAAI,EACRC,EAAK,CAACD,EAENC,EAAKD,EAEDC,GAAM,GACVC,EAAK,gBAAoBF,GAAK,iBAAqBA,GAAK,kBAAsBA,GAAK,iBAAuBA,EAAI,mBAC9GG,EAAK,EAAOH,GAAK,cAAkBA,GAAK,cAAkBA,GAAK,eAAmBA,EAAI,qBAEtFA,EAAI,EAAMA,EACVE,EAAK,gBAAmBF,GAAK,iBAAuBA,GAAK,kBAAsBA,GAAK,iBAAqBA,EAAI,mBAC7GG,EAAK,gBAAoBH,GAAK,eAAmBA,GAAK,cAAkBA,GAAK,cAAkBA,EAAI,MAE7FE,EAAKC,EACb,CAKAL,GAAO,QAAUC,KC/DjB,IAAAK,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAqCA,SAASC,GAAcC,EAAI,CAC1B,IAAIC,EACAC,EACAC,EACJ,OAAKH,IAAM,EACH,iBAEHA,EAAI,EACRC,EAAK,CAACD,EAENC,EAAKD,EAEDC,GAAM,GACVC,EAAK,gBAAoBF,GAAK,eAAmBA,GAAK,cAAiBA,GAAK,eAAmBA,EAAI,kBACnGG,EAAK,EAAOH,GAAK,cAAiBA,GAAK,cAAiBA,GAAK,cAAiBA,EAAI,mBAElFA,EAAI,EAAMA,EACVE,EAAK,eAAmBF,GAAK,eAAmBA,GAAK,cAAiBA,GAAK,eAAmBA,EAAI,mBAClGG,EAAK,cAAiBH,GAAK,cAAiBA,GAAK,cAAiBA,GAAK,cAAiBA,EAAI,MAEtFE,EAAKC,EACb,CAKAL,GAAO,QAAUC,KC/DjB,IAAAK,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAqCA,SAASC,GAAcC,EAAI,CAC1B,IAAIC,EACAC,EACAC,EACJ,OAAKH,IAAM,EACH,mBAEHA,EAAI,EACRC,EAAK,CAACD,EAENC,EAAKD,EAEDC,GAAM,GACVC,EAAK,kBAAsBF,GAAK,eAAmBA,GAAK,cAAiBA,GAAK,cAAiBA,EAAI,kBACnGG,EAAK,EAAOH,GAAK,cAAiBA,GAAK,cAAiBA,GAAK,cAAiBA,EAAI,mBAElFA,EAAI,EAAMA,EACVE,EAAK,eAAkBF,GAAK,cAAiBA,GAAK,cAAiBA,GAAK,eAAmBA,EAAI,qBAC/FG,EAAK,cAAiBH,GAAK,cAAiBA,GAAK,cAAiBA,GAAK,cAAiBA,EAAI,MAEtFE,EAAKC,EACb,CAKAL,GAAO,QAAUC,KC/DjB,IAAAK,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAsBA,IAAIC,GAAK,QAAS,8BAA+B,EAC7CC,GAAY,KACZC,GAAY,KACZC,GAAY,KACZC,GAAY,KACZC,GAAY,KAYhB,SAASC,GAAMC,EAAM,CACpB,IAAIC,EACAC,EAEJ,OAAKF,EAAM,IACVC,EAAID,EAAMA,EACVE,EAAIT,GAAI,CAACO,CAAI,EAAIA,GACR,IAAUA,EAAIE,GAAK,EAAID,EAAEC,EAAEA,EAAG,GAAKD,KAAY,GAAKD,EAAIC,EAAEA,IAE/DD,EAAM,GACHN,GAAWM,CAAI,GAAMA,EAAIA,GAE5BA,EAAM,GACHL,GAAWK,CAAI,EAElBA,EAAM,EACHJ,GAAWI,CAAI,EAElBA,EAAM,IACVC,EAAI,EAAMD,EACHH,GAAWI,CAAE,GAAMD,EAAIA,IAE1BA,EAAM,KACVC,EAAI,EAAMD,EACHF,GAAWG,CAAE,GAAMD,EAAIA,IAExB,CAACP,GAAIO,CAAI,GAAM,GAAKA,EAAIA,EAAIA,EACpC,CAKAR,GAAO,QAAUO,KCvEjB,IAAAI,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAwBA,IAAIC,GAAS,QAAS,OAAQ,EAC1BC,GAAW,QAAS,kCAAmC,EACvDC,EAAU,QAAS,mCAAoC,EACvDC,GAAU,QAAS,mCAAoC,EACvDC,GAAQ,QAAS,iCAAkC,EACnDC,EAAO,QAAS,gCAAiC,EACjDC,GAAM,QAAS,+BAAgC,EAC/CC,EAAM,QAAS,+BAAgC,EAC/CC,GAAM,QAAS,+BAAgC,EAC/CC,GAAM,QAAS,+BAAgC,EAC/CC,EAAK,QAAS,8BAA+B,EAC7CC,GAAc,QAAS,uCAAwC,EAC/DC,GAAc,QAAS,+BAAgC,EACvDC,GAAS,QAAS,kCAAmC,EACrDC,GAAe,KACfC,GAAY,IACZC,GAAU,KACVC,GAAO,KACPC,GAAO,KACPC,GAAO,KAKPC,GAAQpB,GAAQ,qBAAsB,EACtCqB,EAAO,GACPC,GAAQ,kBACRC,GAAQ,IACRC,GAAQ,GACRC,GAAQ,mBACRC,GAAS,mBACTC,GAAS,oBAGTC,EAAK,CAAE,EAAK,EAAK,EAAK,EAAK,CAAI,EAkBnC,SAASC,GAASC,EAAGC,EAAGC,EAAI,CAC3B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACAC,EACAC,EACAC,EACAC,GACAC,GACAC,EACAC,EACAC,EACAC,EACAC,GACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EA0CJ,GAxCK7C,EAAIV,GACRe,EAAQ,GACRC,EAAON,EACP2C,EAAI,KAEJtC,EAAQ,GACRC,EAAOL,EACP0C,EAAI,GAELH,EAAI,EACCjE,GAAKwB,EAAE,CAAI,EAAI,OACnB0C,EAAI,EACCpC,EACCL,EAAI,MACRiC,EAAKjC,EAAIA,EACT6B,EAAKI,EAAKjC,EACVgC,EAAKH,EAAK7B,EACVqB,EAAKW,EAAKhC,EACVoB,EAAKC,EAAKrB,EACVsB,EAAKtB,EAAMiC,EAAG3C,EAAWuC,EAAItC,GAAayC,EAAGxC,GAAY6B,EAAG5B,GAAY2B,EAAI1B,IAE5E4B,EAAK,CAAC3C,EAAI,EAAIqB,CAAE,EAGjBsB,EAAK,CAAC3C,EAAIsB,CAAE,EAERF,IAAM,GACVyC,EAAI,EACJL,EAAKb,IAELlB,EAAQjC,EAAS4B,CAAE,EACnByC,EAAI,IAGDvC,EAAI,OAAWF,EAAIT,IACvBmD,EAAI,EACJnB,EAAK,CAAC3C,EAAIsB,EAAE5B,GAAM0B,CAAC,CAAE,GAAQA,EAAE,GAAQpB,EAAI,CAACA,EAAIsB,EAAE5B,GAAM0B,CAAC,CAAE,CAAE,EAC7DyC,EAAI,EACJpC,EAAQjC,EAAS4B,CAAE,GAEfA,EAAI,GAAOA,EAAI,KAASC,EAAI,MAAU,CAO1C,IANAyC,EAAI,EACJlC,EAAO,EAAMR,EACbG,EAAS,GAAQH,EAAE,GACnBuB,GAAOnD,EAAS4B,EAAE,CAAI,EAAIpB,EAAIqB,CAAE,GAAMO,EACtCe,EAAK9C,EAAK8C,CAAG,EACbP,EAAOO,EACDiB,EAAI,EAAGA,EAAI,GAAIA,IACpBjB,EAAKP,EAAOvC,EAAK8C,EAAGf,CAAK,EAAI7B,GAAK,EAAM4C,EAAGpB,EAAUK,CAAK,EAE3DiC,EAAI,EACJpC,EAAQjC,EAAS4B,CAAE,CACpB,CA8EA,GA5EAS,EAAQ,EAAIT,GAAOpB,EAAGqB,CAAC,EAAI7B,EAAS4B,EAAE,CAAI,GACnCS,EAAO7B,EAAIc,IAAU,EAAIM,EAAI,GAASyC,IAAM,IAClDE,EAAIlE,EAAKgC,CAAK,EACdiC,EAAI,EACJlB,EAAKxB,EAAIA,EACTmC,EAAKX,EAAKxB,EACV+B,GAAKI,EAAKnC,EACViB,EAAMjB,EAAI,EACVa,EAAOI,EAAMA,EACbL,EAAOK,EAAMJ,EACbF,EAAOE,EAAOA,EACdK,EAAMlB,EAAI,EACVU,EAAOQ,EAAMA,EACbC,EAAMnB,EAAI,EACVF,EAAI,CAAE,EAAI,EACVA,EAAI,CAAE,EAAI,EAAMmB,EAChBnB,EAAI,CAAE,EAAIP,GAAW,EAAIS,EAAM,IAAUa,EAAKK,GAC9CpB,EAAI,CAAE,EAAIN,IAAU,GAAQ,EAAIgC,EAAO,GAAKxB,IAASY,EAAKM,EAAIC,GAC9DrB,EAAI,CAAE,EAAID,IAAW,KAAU,KAAOsC,EAAO,IAAMJ,GAAO,KAAOP,EAAO,KAAOxB,IAASW,EAAKD,EAAKS,GAAMnB,EAAE,IAC1GuB,EAAKoB,EAAIxE,GAAU2B,EAAI6C,CAAE,EACzBtC,EAAQjC,EAAS4B,CAAE,EACnByC,EAAI,GAEEzC,EAAI,IAAYyC,IAAM,IAC5B3B,EAAOvC,EAAMyB,CAAE,GAAMd,GAAQc,CAAC,EAAEnB,IAChCkC,EAAOrC,GAAK,IAAMoC,CAAK,EAClBZ,EAAIa,IACR2B,EAAI,EACJJ,EAAI,EAAMtC,EACV4B,EAAKU,EAAIA,EACTT,EAAKD,EAAKU,EACVlB,EAAM7C,EAAM,GAAKyB,EAAIpB,EAAIsB,EAAEY,CAAK,CAAE,EAClCS,EAAKvB,EAAIf,GAAWmC,CAAI,EACxBmB,EAAI3D,EAAI2C,CAAG,EACNA,EAAK,GACTE,EAAKc,EAAIA,EACTb,EAAKD,EAAKc,EACVZ,GAAKD,EAAKa,EACVI,EAAI,EAAMpB,EACVzB,EAAI,CAAE,EAAIyC,EAAI,EACdzC,EAAI,CAAE,GAAO,EAAIwC,EAAM,EAAIA,EAAEC,EAAKd,EAAO,EAAIc,EAAM,GAAQhD,EAC3DO,EAAI,CAAE,GAAM,GAAKwC,EAAEC,EAAM,GAAKX,EAAO,GAAKU,EAAM,EAAIb,EAAO,GAAKc,EAAK,GAAQ,EAAID,EAAEb,EAAO,EAAIG,EAAGW,EAAM,EAAIb,GAAQ/B,GACnHG,EAAI,CAAE,GAAO,IAAM+B,EAAGU,EAAM,KAAKD,EAAEb,EAAO,IAAMG,EAAGW,GAAM,GAAM,GAAKd,IAAU,EAAIE,GAAK,GAAKY,EAAG,MAAUD,EAAG,IAAMA,EAAEC,IAAS,GAAKb,EAAK,GAAKG,IAAU,GAAKS,EAAEZ,EAAK,GAAKE,EAAGH,EAAK,IAAMG,IAAUhC,GAC/LE,EAAI,CAAE,EAAI,EACVyB,EAAKA,EAAKgB,EAAMD,EAAEK,EAAExE,GAAU2B,EAAI6C,CAAE,IAEpCA,EAAI,EAAMpB,EACVE,EAAKc,EAAIA,EACTF,GAAKE,EAAI,EACTM,EAAIN,EAAKD,EAAEK,EAAEN,GACRQ,EAAItB,IACRA,GAAMsB,IAGRxC,EAAQjC,EAAS4B,CAAE,EACnByC,EAAI,IAGCjE,GAAK+B,EAAKhB,CAAK,EAAI,MAAckD,IAAM,IAC7CC,EAAI,EACJlC,EAAO,EAAMR,EACbuB,EAAKvB,EAAIR,IAAY,oBAClB,oBAAmCgB,GAAWA,EACjDH,EAAQjC,EAAS4B,CAAE,EACnByC,EAAI,GAEEzC,EAAI,GAAWyC,IAAM,IAC3BC,EAAI,EACCpC,EACJiB,EAAK9C,EAAM,EAAIuB,GAAOpB,EAAG2B,CAAI,EAAInC,EAAQ4B,EAAE,CAAG,EAAI,EAElDuB,EAAK9C,EAAM,EAAIuB,GAAOpB,EAAG,EAAI2B,CAAI,EAAInC,EAAQ4B,EAAE,CAAG,EAAI,EAEvDK,EAAQjC,EAAS4B,CAAE,EACnByC,EAAI,GAEAA,IAAM,EAKV,GAJAC,EAAI,EACJlC,EAAO,EAAMR,EACb2C,EAAItE,GAAS,EAAMkC,CAAK,EACxBa,EAAMwB,EAAID,EAAIpE,EAAMyB,EAAET,CAAK,EACtBoD,EAAI7D,GACRsC,IAASjC,GAAKiC,CAAG,GAAOhC,GAAKgC,CAAG,EAAG/B,GAAK+B,CAAG,EAAEZ,GAAOA,GAAWA,EAC/De,EAAKvB,EAAIf,GAAUmC,CAAG,EACtB0B,EAAI1B,EACJY,GAAK,CAACzD,EAAMyB,EAAEjB,EAAO,EAAIN,EAAK,CAACc,EAAKS,EAAE8C,EAAEA,CAAE,EAAM5D,GAAQc,CAAC,EACzDI,EAAQ,EAAM4B,OAEd,QAAA1C,GAAO,qEAAsE,EACtE,IAGT,OAAKmD,EAAI,IACRL,EAAKpD,GAAcuC,EAAIvB,EAAG0C,EAAGzC,EAAGC,EAAGG,EAAOD,EAAOE,CAAM,GAEjD8B,CACR,CAKAnE,GAAO,QAAU8B,KCrRjB,IAAAgD,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAmCA,IAAIC,GAAQ,QAAS,iCAAkC,EACnDC,GAAmB,QAAS,2CAA4C,EACxEC,GAAO,QAAS,gCAAiC,EACjDC,GAAU,KA0Bd,SAASC,GAAaC,EAAGC,EAAGC,EAAQ,CACnC,OAAKP,GAAOK,CAAE,GAAKL,GAAOM,CAAE,EACpB,IAEHA,EAAIL,GACD,IAEHI,EAAI,GAAOA,EAAI,EACZ,IAGHE,IAAU,GACTF,IAAM,EACHH,GAEHG,IAAM,EACH,EAEDF,GAASG,EAAG,EAAID,EAAGA,CAAE,EAGxBA,IAAM,EACH,EAEHA,IAAM,EACHH,GAEDC,GAASG,EAAGD,EAAG,EAAIA,CAAE,CAC7B,CAKAN,GAAO,QAAUK,KChDjB,IAAII,GAAO,KAKX,OAAO,QAAUA",
  "names": ["require_higher_newton", "__commonJSMin", "exports", "module", "logger", "gammainc", "abs", "exp", "ln", "MAX_FLOAT32", "debug", "higherNewton", "x0", "a", "m", "p", "q", "lgama", "invfp", "pcase", "dlnr", "xini", "ck0", "ck1", "ck2", "a2", "x2", "px", "qx", "xr", "t", "n", "r", "x", "require_polyval_ak1", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_ak2", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_lambdaeta", "__commonJSMin", "exports", "module", "abs", "exp", "ln", "evalpoly", "polyvalAK1", "polyvalAK2", "THRESHOLD", "ONEO12", "ONEO120", "AK", "lambdaeta", "eta", "L2", "L3", "L4", "L5", "la", "L", "q", "r", "s", "require_chepolsum", "__commonJSMin", "exports", "module", "A", "chepolsum", "n", "t", "tt", "u0", "u1", "u2", "k", "require_polyval_c", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_d", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_stirling", "__commonJSMin", "exports", "module", "gammaln", "ln", "LN_SQRT_TWO_PI", "SMALLEST_FLOAT32", "MAX_FLOAT32", "chepolsum", "polyvalC", "polyvalD", "C6", "stirling", "x", "z", "require_gamstar", "__commonJSMin", "exports", "module", "exp", "gamma", "ln", "FLOAT32_MAX", "SQRT_TWO_PI", "stirling", "gamstar", "x", "require_rational_ak0bk0", "__commonJSMin", "exports", "module", "evalrational", "x", "ax", "s1", "s2", "require_eps1", "__commonJSMin", "exports", "module", "abs", "ln", "lambdaeta", "rateval", "eps1", "eta", "la", "require_rational_ak1bk1", "__commonJSMin", "exports", "module", "evalrational", "x", "ax", "s1", "s2", "require_rational_ak2bk2", "__commonJSMin", "exports", "module", "evalrational", "x", "ax", "s1", "s2", "require_rational_ak3bk3", "__commonJSMin", "exports", "module", "evalrational", "x", "ax", "s1", "s2", "require_eps2", "__commonJSMin", "exports", "module", "ln", "rateval1", "rateval2", "rateval3", "eps2", "eta", "lnmeta", "x", "require_rational_ak4bk4", "__commonJSMin", "exports", "module", "evalrational", "x", "ax", "s1", "s2", "require_rational_ak5bk5", "__commonJSMin", "exports", "module", "evalrational", "x", "ax", "s1", "s2", "require_rational_ak6bk6", "__commonJSMin", "exports", "module", "evalrational", "x", "ax", "s1", "s2", "require_rational_ak7bk7", "__commonJSMin", "exports", "module", "evalrational", "x", "ax", "s1", "s2", "require_rational_ak8bk8", "__commonJSMin", "exports", "module", "evalrational", "x", "ax", "s1", "s2", "require_eps3", "__commonJSMin", "exports", "module", "ln", "rational1", "rational2", "rational3", "rational4", "rational5", "eps3", "eta", "x", "y", "require_compute", "__commonJSMin", "exports", "module", "logger", "evalpoly", "gammaln", "erfcinv", "gamma", "sqrt", "abs", "exp", "min", "pow", "ln", "SQRT_TWO_PI", "MAX_FLOAT32", "TWO_PI", "higherNewton", "lambdaeta", "gamstar", "eps1", "eps2", "eps3", "debug", "HALF", "ONEO3", "ONEO4", "ONEO5", "ONEO6", "ONEO12", "ONEO24", "CK", "compute", "a", "p", "q", "ap1inv", "invfp", "lgama", "pcase", "porq", "ainv", "logr", "ap22", "ap14", "ap13", "ap12", "vgam", "vmin", "xini", "ap1", "ap2", "ap3", "eta", "p6", "p5", "x0", "a2", "L2", "L3", "L4", "b2", "b3", "p3", "a4", "fp", "p4", "p2", "a3", "xr", "ck", "b", "L", "i", "k", "m", "r", "s", "t", "y", "require_main", "__commonJSMin", "exports", "module", "isnan", "FLOAT32_SMALLEST", "PINF", "compute", "gammaincinv", "p", "a", "upper", "main"]
}
